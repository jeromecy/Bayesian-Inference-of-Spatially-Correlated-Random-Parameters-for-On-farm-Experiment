matrix chol_AR_matrix(real rho,int d){
  matrix[d,d] MatAR;
  MatAR = rep_matrix(0,d,d);
  for(i in 1:d){
    for(j in i:d){
      if(j>=i && i==1) MatAR[j,i] = rho^(j-1);
      else if(i>=2 && j>=i) MatAR[j,i] = rho^(j-i)*sqrt(1-rho^2);
    }
  }
  return MatAR;
}
 
  matrix chol_three(matrix LA,matrix LB,matrix LC, vector d) {
    vector[num_elements(d)] new_d;
    new_d = rep_vector(0, num_elements(d));
    for(iA in 1:cols(LA)){
      for(jA in 1:iA){
        for(iB in 1:cols(LB)){
          for(jB in 1:iB){
            for(iC in 1:cols(LC)){
              for(jC in 1:iC){
                new_d[cols(LC)*(cols(LB)*(iA-1)+iB-1)+iC] = new_d[cols(LC)*(cols(LB)*(iA-1)+iB-1)+iC] + LA[iA,jA]*LB[iB,jB]*LC[iC,jC]*d[cols(LC)*(cols(LB)*(jA-1)+jB-1)+jC];
              }
            }
          }
        }
      }
    }
    return to_matrix(new_d,cols(LA)*cols(LB),cols(LC),0);
  }
  
  
  
matrix chol_kronecker_product(matrix matA, matrix matB) {
  matrix[rows(matA)*rows(matB),rows(matA)*rows(matB)] matC;
  matC = rep_matrix(0,rows(matA)*rows(matB),rows(matA)*rows(matB));
  for (k in 1:rows(matA)){
    for (l in 1:k){
      for (m in 1:rows(matB)){
        for (n in 1:m){
          matC[rows(matB)*(k-1)+m, cols(matB)*(l-1)+n] = matA[k,l] * matB[m,n];
        }
      }
    }
  }
  return matC;
}

matrix chol_kronecker_product_three_mat(matrix LA,matrix LB,matrix LC,int d) {
  matrix[d,d] matD;
  matD = rep_matrix(0,d,d);
 
  for(iA in 1:cols(LA)){
    for(jA in 1:iA){
      for(iB in 1:cols(LB)){
        for(jB in 1:iB){
          for(iC in 1:cols(LC)){
            for(jC in 1:iC){
              matD[cols(LC)*(cols(LB)*(iA-1)+iB-1)+iC,cols(LC)*(cols(LB)*(jA-1)+jB-1)+jC] = LA[iA,jA]*LB[iB,jB]*LC[iC,jC];
            }
          }
        }
      }
    }
  }
  return matD;
}
  
  
matrix as_matrix(vector X, int N, int K) { 
  matrix[N, K] Y; 
  for (i in 1:N) {
    Y[i] = to_row_vector(X[((i - 1) * K + 1):(i * K)]); 
  }
  return Y; 
}
  
  
  
vector chol_kronecker_product_three(matrix LA,matrix LB,matrix LC, vector d) {
  vector[num_elements(d)] new_d;
    new_d = rep_vector(0, num_elements(d));
    for(iA in 1:cols(LA)){
      for(jA in 1:iA){
        for(iB in 1:cols(LB)){
          for(jB in 1:iB){
            for(iC in 1:cols(LC)){
              for(jC in 1:iC){
                new_d[cols(LC)*(cols(LB)*(iA-1)+iB-1)+iC] = new_d[cols(LC)*(cols(LB)*(iA-1)+iB-1)+iC] + LA[iA,jA]*LB[iB,jB]*LC[iC,jC]*d[cols(LC)*(cols(LB)*(jA-1)+jB-1)+jC];
              }
            }
          }
        }
      }
    }
  return new_d;
}
	

	